//gradle的可执行目录
gradle.println "gradleHomeDir:${gradle.gradleHomeDir}"
//gradle的用户目录,用于缓存一些下载好的资源,编译好的构建脚本等
gradle.println "gradleUserHomeDir:${gradle.gradleUserHomeDir}"
//gradle的版本号
gradle.println "gradleVersion:${gradle.gradleVersion}"
//gralde当前构建的启动参数
gradle.println "startParameter:${gradle.startParameter}"
gradle.println("gradle.startParameter.properties--------------->")
gradle.startParameter.properties.each {
    gradle.println("${it.key}: ${it.value}")
}
gradle.println("<------------gradle.startParameter.properties")
gradle.println "startParameter.taskNames: ${gradle.startParameter.taskNames}"


// https://gist.github.com/mkckr0/97ec5b0d99feede4c19ee6f905d5e722

def repoMirrorMap = [
        "https://repo.maven.apache.org/maven2"   : "https://maven.aliyun.com/repository/central",
        "https://dl.google.com/dl/android/maven2": "https://maven.aliyun.com/repository/google",
        "https://plugins.gradle.org/m2"          : "https://maven.aliyun.com/repository/gradle-plugin",
        "https://jcenter.bintray.com"            : "https://maven.aliyun.com/repository/jcenter"
]
def repoReplaceMap = [
        "https://maven.google.com": "https://dl.google.com/dl/android/maven2"
]

def printRepos = { RepositoryHandler repoHandler ->
    repoHandler.all { repository ->
        if (repository instanceof MavenArtifactRepository) {
            println("Maven Repo: name=\"${repository.name}\", url=${repository.url}, artifacts=${repository.artifactUrls}")
        }
    }
}

def setMirrors = { RepositoryHandler repoHandler ->
//     maven { url "http://127.0.0.1:10072/repo/maven-local/" }
    repoHandler.maven { url "https://maven.aliyun.com/repository/public" }
    //central有的，public聚合仓不一定有，奇葩
    repoHandler.maven { url 'https://maven.aliyun.com/repository/central' }
    repoHandler.maven { url "https://maven.aliyun.com/repository/google" }
    repoHandler.maven { url "https://maven.aliyun.com/repository/gradle-plugin" }
    repoHandler.maven { url 'https://jitpack.io/' }
    repoHandler.maven { url 'https://repo.huaweicloud.com/repository/maven' }
    repoHandler.maven { url 'https://mirrors.cloud.tencent.com/nexus/repository/maven-public' }

    repoHandler.maven { url 'https://maven.aliyun.com/repository/spring' }
    repoHandler.maven { url 'https://maven.aliyun.com/repository/spring-plugin' }
    repoHandler.maven { url 'https://maven.aliyun.com/repository/grails-core' }
    repoHandler.maven { url 'https://maven.aliyun.com/repository/apache-snapshots' }

    repoHandler.all { repo ->
        if (repo instanceof MavenArtifactRepository && !repo.name.endsWith("Origin")) {
            def originName = repo.name
            def originUrl = repo.url.toString().trim()
            if (originUrl.startsWith('https://repo1.maven.org/maven2/')) {
//              println("Repository ${repo.url} remove.")
                remove repo
            }
            if (originUrl.startsWith('https://jcenter.bintray.com/')) {
//              println("Repository ${repo.url} remove.")
                remove repo
            }

            if (originUrl.startsWith('https://dl.google.com/dl/android/maven2/')) {
//              println("Repository ${repo.url} remove.")

                try {
                    remove repo
                } catch (e) {
                    e.printStackTrace()
                }
            }
            if (originUrl.startsWith('https://plugins.gradle.org/m2/')) {
//              println("Repository ${repo.url} remove.")
                remove repo
            }

            // 替换 URL
            def newUrl = repoReplaceMap[originUrl]
            if (newUrl != null) {
                repo.setUrl(newUrl)
                originUrl = newUrl
            }

            // 镜像设置
            newUrl = repoMirrorMap[originUrl]
            if (newUrl != null) {
                repo.setUrl(newUrl)
                // 添加原始仓库以查找缺失的 JAR 文件
                repo.artifactUrls = [originUrl]
                // 保留原始仓库以查找缺失的 POM
                try {
                    repoHandler.maven(originUrl) { it.name = "${originName} Origin" }
                } catch (e) {
                    e.printStackTrace()
                }
            }
        }
    }
    printRepos(repoHandler)
}

def useNewApi = true
try {
    settingsEvaluated { settings ->
        settings.pluginManagement {
            repositories {
                setMirrors(it)
            }
        }
        settings.dependencyResolutionManagement {
            repositories {
                setMirrors(it)
            }
        }
    }
} catch (Exception e) {
    useNewApi = false
}


if (!useNewApi) {
    allprojects {
        buildscript {
            repositories {
                setMirrors(it)
            }
        }
        repositories {
            setMirrors(it)
        }
    }
}

